{"version":3,"file":"static/webpack/static\\development\\pages\\classification.js.82c1bb8ad1423dfe1637.hot-update.js","sources":["webpack:///./components/CustomerDocsTable.js"],"sourcesContent":["import React from 'react';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\n//Calls to determine the proper values in the classifications csv files by customer would go here\r\n//and populate the table below instead of the hard-coded dummy data.\r\n\r\n//Populating cell data\r\n//Step 1) Determine which customers were selected and note their classifications csv filepaths from the customers array\r\n//Step 2) For each selected customer, for each selected document type, find the value of the match in the appropriate csv file\r\n//Step 3) Build out the full table of values based on the selected customers, document types, and the located values\r\n//Step 4) Planned on using react-pdf to allow for hovering over document types to show the sample pdf of that document type\r\n\r\n//For more about editing the table data and saving as csv, please see continuation in classification.js\r\n\r\nconst CustomerDocsTable = () => {\r\n    return(\r\n        <Table striped bordered hover>\r\n            <thead>\r\n                <tr>\r\n                    <td>Document Types</td>\r\n                    <td>Customer 1</td>\r\n                    <td>Customer 2</td>\r\n                    <td>Customer 3</td>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>Document A</td>\r\n                    <td>Document 1-A</td>\r\n                    <td>Document 2-A</td>\r\n                    <td>Document 3-A</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Document B</td>\r\n                    <td>Document 1-B</td>\r\n                    <td>Document 2-B</td>\r\n                    <td>Document 3-B</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default CustomerDocsTable;"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}